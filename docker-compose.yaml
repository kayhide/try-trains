version: "3.6"
services:

  apiserver:
    command:
    - apiserver
    container_name: trains-apiserver
    image: allegroai/trains:latest
    restart: unless-stopped
    volumes:
    - ${TRAINS_ROOT}/logs:/var/log/trains
    - ${TRAINS_ROOT}/config:/opt/trains/config
    - ${TRAINS_ROOT}/data/fileserver:/mnt/fileserver
    depends_on:
      - redis
      - mongo
      - elasticsearch
      - fileserver
    environment:
      TRAINS_ELASTIC_SERVICE_HOST: elasticsearch
      TRAINS_ELASTIC_SERVICE_PORT: 9200
      TRAINS_MONGODB_SERVICE_HOST: mongo
      TRAINS_MONGODB_SERVICE_PORT: 27017
      TRAINS_REDIS_SERVICE_HOST: redis
      TRAINS_REDIS_SERVICE_PORT: 6379
      TRAINS_SERVER_DEPLOYMENT_TYPE: ${TRAINS_SERVER_DEPLOYMENT_TYPE:-linux}
      TRAINS__apiserver__pre_populate__enabled: "true"
      TRAINS__apiserver__pre_populate__zip_files: "/opt/trains/db-pre-populate"
      TRAINS__apiserver__pre_populate__artifacts_path: "/mnt/fileserver"
    ports:
    - "8008:8008"
    networks:
      - backend

  elasticsearch:
    networks:
      - backend
    container_name: trains-elastic
    environment:
      ES_JAVA_OPTS: -Xms2g -Xmx2g
      bootstrap.memory_lock: "true"
      cluster.name: trains
      cluster.routing.allocation.node_initial_primaries_recoveries: "500"
      cluster.routing.allocation.disk.watermark.low: 2gb
      cluster.routing.allocation.disk.watermark.high: 2gb
      cluster.routing.allocation.disk.watermark.flood_stage: 2gb
      discovery.zen.minimum_master_nodes: "1"
      discovery.type: "single-node"
      http.compression_level: "7"
      node.ingest: "true"
      node.name: trains
      reindex.remote.whitelist: '*.*'
      xpack.monitoring.enabled: "false"
      xpack.security.enabled: "false"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
    restart: unless-stopped
    volumes:
    - ${TRAINS_ROOT}/data/elastic_7:/usr/share/elasticsearch/data

  fileserver:
    networks:
      - backend
    command:
    - fileserver
    container_name: trains-fileserver
    image: allegroai/trains:latest
    restart: unless-stopped
    volumes:
    - ${TRAINS_ROOT}/logs:/var/log/trains
    - ${TRAINS_ROOT}/data/fileserver:/mnt/fileserver
    - ${TRAINS_ROOT}/config:/opt/trains/config
    ports:
    - "8081:8081"

  mongo:
    networks:
      - backend
    container_name: trains-mongo
    image: mongo:3.6.5
    restart: unless-stopped
    command: --setParameter internalQueryExecMaxBlockingSortBytes=196100200
    volumes:
    - ${TRAINS_ROOT}/data/mongo/db:/data/db
    - ${TRAINS_ROOT}/data/mongo/configdb:/data/configdb

  redis:
    networks:
      - backend
    container_name: trains-redis
    image: redis:5.0
    restart: unless-stopped
    volumes:
    - ${TRAINS_ROOT}/data/redis:/data

  webserver:
    command:
    - webserver
    container_name: trains-webserver
    image: allegroai/trains:latest
    restart: unless-stopped
    depends_on:
      - apiserver
    ports:
    - "8080:80"

  agent-services:
    networks:
      - backend
    container_name: trains-agent-services
    image: allegroai/trains-agent-services:latest
    restart: unless-stopped
    privileged: true
    environment:
      TRAINS_HOST_IP: ${TRAINS_HOST_IP}
      TRAINS_WEB_HOST: ${TRAINS_WEB_HOST:-}
      TRAINS_API_HOST: http://apiserver:8008
      TRAINS_FILES_HOST: ${TRAINS_FILES_HOST:-}
      TRAINS_API_ACCESS_KEY: ${TRAINS_API_ACCESS_KEY:-}
      TRAINS_API_SECRET_KEY: ${TRAINS_API_SECRET_KEY:-}
      TRAINS_AGENT_GIT_USER: ${TRAINS_AGENT_GIT_USER}
      TRAINS_AGENT_GIT_PASS: ${TRAINS_AGENT_GIT_PASS}
      TRAINS_AGENT_UPDATE_VERSION: ${TRAINS_AGENT_UPDATE_VERSION:->=0.15.0}
      TRAINS_AGENT_DEFAULT_BASE_DOCKER: "ubuntu:18.04"
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-}
      AZURE_STORAGE_ACCOUNT: ${AZURE_STORAGE_ACCOUNT:-}
      AZURE_STORAGE_KEY: ${AZURE_STORAGE_KEY:-}
      GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS:-}
      TRAINS_WORKER_ID: "trains-services"
      TRAINS_AGENT_DOCKER_HOST_MOUNT: "${TRAINS_ROOT}/agent:/root/.trains"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${TRAINS_ROOT}/agent:/root/.trains
    depends_on:
      - apiserver

networks:
  backend:
    driver: bridge
